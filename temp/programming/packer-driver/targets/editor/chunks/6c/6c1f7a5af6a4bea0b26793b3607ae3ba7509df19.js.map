{"version":3,"sources":["file:///D:/Gameproject/NewProject-001/assets/script/workPyManeger.ts"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA","sourcesContent":["// import { _decorator, Component, Node, PhysicsSystem2D, EPhysics2DDrawFlags, Collider2D, Contact2DType, IPhysics2DContact, BoxCollider2D, director, Sprite, Color } from 'cc';\r\n// const { ccclass, property } = _decorator;\r\n\r\n// @ccclass('workPyManeger')\r\n// export class workPyManeger extends Component {\r\n//     onLoad(){\r\n//         // director.enable = true;\r\n//         PhysicsSystem2D.instance.enable = true;\r\n//         PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.Aabb | \r\n//             EPhysics2DDrawFlags.Pair | \r\n//             EPhysics2DDrawFlags.CenterOfMass |\r\n//             EPhysics2DDrawFlags.Joint |\r\n//             EPhysics2DDrawFlags.Shape ;\r\n//     }\r\n\r\n//     start(){\r\n//         //绘制物理信息\r\n        \r\n        \r\n//         //注册单个碰撞体的回调函数\r\n//         console.log('my information')\r\n//         let collider = this.node.getComponent(Collider2D);\r\n//         // console.log(collider);\r\n//         // console.log(collider);\r\n//         if (collider) {\r\n//             collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n//             collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n//             collider.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\r\n//             collider.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\r\n//         }\r\n\r\n//         // 注册全局碰撞回调函数\r\n//         // if (PhysicsSystem2D.instance) {\r\n//         //     PhysicsSystem2D.instance.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n//         //     PhysicsSystem2D.instance.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n//         //     PhysicsSystem2D.instance.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\r\n//         //     PhysicsSystem2D.instance.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\r\n//         // }\r\n//     }\r\n    \r\n//     onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n//         // 只在两个碰撞体开始接触时被调用一次\r\n//         // console.log('Work onBeginContact');\r\n//     }\r\n//     onEndContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n//         // 只在两个碰撞体结束接触时被调用一次\r\n//         // console.log('Work onEndContact');\r\n\r\n//     }\r\n//     onPreSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n//         // 每次将要处理碰撞体接触逻辑时被调用\r\n//         // console.log('Work onPreSolve');\r\n//     }\r\n//     onPostSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n//         // 每次处理完碰撞体接触逻辑时被调用\r\n//         // console.log('Work onPostSolve');\r\n\r\n//     }\r\n\r\n//     update(deltaTime: number) {\r\n        \r\n//     }\r\n// }\r\n\r\n\r\n"]}