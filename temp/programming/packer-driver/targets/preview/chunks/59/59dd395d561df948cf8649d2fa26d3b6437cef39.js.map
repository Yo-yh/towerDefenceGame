{"version":3,"sources":["file:///D:/Gameproject/NewProject-001/assets/script/BulletPerManeger.ts"],"names":["_decorator","Component","PhysicsSystem2D","EPhysics2DDrawFlags","Collider2D","Contact2DType","Vec2","DanPerManeger","diji","ccclass","property","BulletPerManeger","onLoad","instance","enable","debugDrawFlags","Aabb","Pair","CenterOfMass","Joint","Shape","start","collider","node","getComponent","on","BEGIN_CONTACT","onBeginContact","update","deltaTime","x","position","y","bulletAttack","isOverScreen","destroy","selfCollider","otherCollider","contact","istarget","ifTarget","bulletType","PaoBullet","DanBullet","GuangZiBullet","FengYiBullet","EmenyBullet","parent","name","speed","Math","cos","angle","sin","setPosition","targetArray","length","x1","y1","currenTarget","isValid","getAngle","worldPosition","end","dx","dy","dir","signAngle"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, PhysicsSystem2D, EPhysics2DDrawFlags, Collider2D, Contact2DType, IPhysics2DContact, BoxCollider2D, director, Sprite, Color, resources, SpriteFrame, Layers, find, Vec3, Vec2 } from 'cc';\r\nimport { DanPerManeger } from './DanperManeger';\r\nimport { diji } from './diji';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BulletPerManeger')\r\nexport class BulletPerManeger extends Component {\r\n    @property \r\n    isOverScreen:boolean = false;\r\n\r\n    @property\r\n    istarget:boolean = false;\r\n\r\n    @property\r\n    speed:number;\r\n\r\n    @property\r\n    bulletType:number;\r\n\r\n    @property\r\n    shenmuTarget:boolean = false;\r\n    //1:散射 2：追击 3：光子 4：凤翼 11：为敌机\r\n\r\n    @property\r\n    angle:number;\r\n    onLoad() {\r\n        //绘制物理信息\r\n        PhysicsSystem2D.instance.enable = true;\r\n        PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.Aabb | \r\n            EPhysics2DDrawFlags.Pair | \r\n            EPhysics2DDrawFlags.CenterOfMass |\r\n            EPhysics2DDrawFlags.Joint |\r\n            EPhysics2DDrawFlags.Shape ;\r\n    }\r\n\r\n    start(){\r\n\r\n        let collider = this.node.getComponent(Collider2D);\r\n\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            // collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n            // collider.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\r\n            // collider.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        let x = this.node.position.x\r\n        let y = this.node.position.y\r\n        \r\n        this.bulletAttack(deltaTime);\r\n\r\n        if(x>800 || x<-800 || y>450 || y<-450){\r\n            this.isOverScreen = true;\r\n            this.node.destroy();\r\n\r\n        }\r\n\r\n    }\r\n\r\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n\r\n        this.istarget = true;\r\n        this.node.destroy();\r\n        // this.node.destroy()\r\n    }\r\n    // onEndContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n\r\n\r\n    // }\r\n    // onPreSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n\r\n    // }\r\n    // onPostSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n\r\n    // }\r\n\r\n    ifTarget():boolean{\r\n        return this.istarget;\r\n    }\r\n\r\n    bulletAttack(deltaTime){\r\n        if(this.bulletType == 1){\r\n            this.PaoBullet(deltaTime);\r\n        }\r\n        if(this.bulletType == 2){\r\n            this.DanBullet(deltaTime);\r\n        }\r\n        if(this.bulletType == 3){\r\n            this.GuangZiBullet(deltaTime);\r\n        }\r\n        if(this.bulletType == 4){\r\n            this.FengYiBullet(deltaTime);\r\n        }\r\n\r\n        if(this.bulletType == 11){\r\n            this.EmenyBullet(deltaTime);\r\n        }\r\n    }\r\n\r\n    PaoBullet(deltaTime){\r\n        let x = this.node.position.x\r\n        let y = this.node.position.y\r\n        if(this.node.parent.parent.parent.parent.name == \"right\"){\r\n            x = x + this.speed * Math.cos(this.angle) * deltaTime;\r\n            y = y + this.speed * Math.sin(this.angle) * deltaTime;\r\n        }else{\r\n            x = x - this.speed * Math.cos(this.angle) * deltaTime;\r\n            y = y + this.speed * Math.sin(this.angle) * deltaTime;\r\n        }\r\n        this.node.setPosition(x,y,0)\r\n    }\r\n    FengYiBullet(deltaTime){\r\n        let x = this.node.position.x\r\n        let y = this.node.position.y\r\n\r\n        x = x - this.speed * deltaTime;\r\n\r\n        this.node.setPosition(x,y,0);\r\n        // y = y + this.speed * deltaTime;\r\n    }\r\n\r\n    EmenyBullet(deltaTime){\r\n        let x = this.node.position.x\r\n        let y = this.node.position.y\r\n\r\n        if(this.node.parent.getComponent(diji).targetArray.length >0){\r\n            x = x + this.speed * deltaTime;\r\n        }else{\r\n            x = x + this.speed * deltaTime;\r\n            y = y - this.speed * deltaTime;\r\n        }\r\n        this.node.setPosition(x,y,0)\r\n    }\r\n\r\n    DanBullet(deltaTime){\r\n        let x1 = this.node.position.x;\r\n        let y1 = this.node.position.y;\r\n\r\n        if(this.node.parent.getComponent(DanPerManeger).currenTarget.isValid){\r\n            this.angle = this.getAngle(this.node.worldPosition,this.node.parent.getComponent(DanPerManeger).currenTarget.worldPosition);\r\n        }else{\r\n            this.node.destroy();\r\n        }\r\n        if(this.node.parent.parent.parent.parent.name == \"right\"){\r\n            x1 = x1 + this.speed * Math.cos(this.angle) * deltaTime;\r\n            y1 = y1 + this.speed * Math.sin(this.angle) * deltaTime;\r\n        }else{\r\n            x1 = x1 - this.speed * Math.cos(this.angle) * deltaTime;\r\n            y1 = y1 + this.speed * Math.sin(this.angle) * deltaTime;\r\n        }\r\n        this.node.setPosition(x1,y1,0)\r\n    }\r\n    GuangZiBullet(deltaTime){\r\n        let x = this.node.position.x\r\n        let y = this.node.position.y\r\n        if(this.node.parent.parent.parent.parent.name == \"right\"){\r\n            x = x + this.speed * Math.cos(this.angle) * deltaTime;\r\n            y = y + this.speed * Math.sin(this.angle) * deltaTime;\r\n        }else{\r\n            x = x - this.speed * Math.cos(this.angle) * deltaTime;\r\n            y = y + this.speed * Math.sin(this.angle) * deltaTime;\r\n        }\r\n        this.node.setPosition(x,y,0)\r\n    }\r\n\r\n    //remember to use world position\r\n    getAngle(start:Vec3,end:Vec3):number{\r\n        let dx = start.x - (end.x );\r\n        let dy = start.y - (end.y );\r\n        let dir = new Vec2(dx,dy);\r\n\r\n        let angle = dir.signAngle(new Vec2(1,0));\r\n\r\n        // let degreen = angle / Math.PI * 180 ;\r\n        \r\n\r\n        return angle\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n"]}